classDiagram
    %% Main Application Structure
    class App {
        +render() ReactElement
    }
    
    class Pages {
        +Router router
        +getCurrentPage(url) string
        +render() ReactElement
    }
    
    class Layout {
        +children ReactNode
        +currentPageName string
        +isMobile boolean
        +sidebarOpen boolean
        +toggleSidebar()
        +render() ReactElement
    }
    
    %% Core Page Components
    class Dashboard {
        +ports Port[]
        +disruptions Disruption[]
        +tariffs Tariff[]
        +dateRange Date[]
        +isMobile boolean
        +loadDashboardData()
        +handleDateRangeChange()
    }
    
    class VesselTracking {
        +vessels Vessel[]
        +filteredVessels Vessel[]
        +searchTerm string
        +statusFilter string
        +filterVessels()
        +handleSearch()
    }
    
    class TariffTracking {
        +tariffs Tariff[]
        +searchQuery string
        +categoryFilter string
        +loadTariffData()
        +filterTariffs()
    }
    
    class TradeRoutes {
        +routeData TradeRoute[]
        +selectedRoute TradeRoute
        +isLoading boolean
        +selectedTimeframe string
        +isMobile boolean
        +loadRouteData()
    }
    
    class Analytics {
        +disruptionData DisruptionData[]
        +severityTrend TrendData[]
        +portAnalytics PortAnalytics[]
        +loadAnalyticsData()
        +safeParseDate(date) Date
    }
    
    class LiveAIS {
        +vessels Vessel[]
        +realTimeData AISData[]
        +stats Statistics
        +loadLiveData()
        +updateRealTime()
    }
    
    class LivePortView {
        +selectedPort Port
        +satelliteData SatelliteData
        +status ConnectionStatus
        +loadPortData()
    }
    
    class MobileAppDownload {
        +features AppFeature[]
        +roadmap RoadmapItem[]
        +render()
    }
    
    %% Dashboard Components
    class GlobalMap {
        +ports Port[]
        +disruptions Disruption[]
        +tariffs Tariff[]
        +isMobile boolean
        +legendCollapsed boolean
        +mapInstance LeafletMap
        +addMarkers()
        +toggleLegend()
    }
    
    class MetricsPanel {
        +ports Port[]
        +disruptions Disruption[]
        +isLoading boolean
        +calculateMetrics()
    }
    
    class ActiveAlerts {
        +disruptions Disruption[]
        +onGenerateAlerts Function
        +isLoading boolean
        +getCriticalAlerts()
    }
    
    class DateSlicer {
        +minDate Date
        +maxDate Date
        +value Date[]
        +isMobile boolean
        +onValueChange Function
        +handleValueChange()
    }
    
    class DisruptionTimeline {
        +disruptions Disruption[]
        +timeline TimelineEvent[]
        +generateTimeline()
    }
    
    class TradeRoutesComponent {
        +routes TradeRoute[]
        +selectedRoute TradeRoute
        +routeStats RouteStatistics
        +renderRoutes()
    }
    
    %% Data Models
    class Port {
        +id string
        +name string
        +country string
        +coordinates Coordinates
        +annual_throughput number
        +port_code string
        +status string
        +strategic_importance number
        +facilities string[]
        +major_shipping_lines string[]
        +connectivity_score number
    }
    
    class Disruption {
        +id string
        +title string
        +description string
        +start_date Date
        +end_date Date
        +severity string
        +affected_regions string[]
        +economic_impact string
        +status string
        +confidence number
        +sources string[]
        +category string
        +location Coordinates
    }
    
    class Tariff {
        +id string
        +name string
        +type string
        +currentRate number
        +projectedRate number
        +countries string[]
        +products string[]
        +effectiveDate Date
        +priority string
        +estimatedImpact string
        +affectedTrade string
        +imposingCountry string
    }
    
    class Vessel {
        +id string
        +name string
        +type string
        +flag string
        +coordinates Coordinates
        +heading number
        +speed number
        +status string
        +destination string
        +eta Date
        +imo_number string
        +dwt number
        +length number
        +year_built number
    }
    
    %% API Layer
    class APIAggregator {
        +cache DataCache
        +sources APISource[]
        +getAggregatedPorts() Port[]
        +getAggregatedDisruptions() Disruption[]
        +getAggregatedTariffs() Tariff[]
        +clearCache()
    }
    
    class DataCache {
        +cache Map
        +TTL_CONFIG object
        +set(key, data, type)
        +get(key) any
        +clear()
        +isExpired(item) boolean
    }
    
    class RealTimeIntegration {
        +API_ENDPOINTS object
        +cache Map
        +getRealTimePortData() Port[]
        +getRealTimeDisruptions() Disruption[]
        +getRealTimeVesselData() Vessel[]
        +getCachedData(key) any
        +setCachedData(key, data)
    }
    
    class NewsIntegration {
        +MARITIME_SEARCH_TERMS string[]
        +NEWS_SOURCES object
        +fetchRealTimeMaritimeNews() NewsData[]
        +filterMaritimeNews(articles) NewsData[]
        +getCachedData(key) any
    }
    
    class TariffIntegration {
        +TARIFF_API_ENDPOINTS object
        +comprehensiveTariffData Tariff[]
        +fetchRealTimeTariffData() Tariff[]
        +fetchLiveUSCensusTariffs() Tariff[]
        +transformTariffData(data) Tariff[]
    }
    
    class MaritimeAPIs {
        +generateVesselData() Vessel[]
        +generateWeatherData() WeatherData[]
        +generatePortCapacityData() PortCapacity[]
        +generateFreightRatesData() FreightRates[]
        +getComprehensiveMaritimeData() MaritimeData
    }
    
    class RealTimeDataManager {
        +dataSources DataSource[]
        +updateInterval number
        +isUpdating boolean
        +startRealTimeUpdates()
        +stopRealTimeUpdates()
        +fetchLatestData()
        +processDataUpdates()
    }
    
    %% Entity Services
    class PortEntity {
        +list(sortBy, limit) Port[]
        +get(id) Port
        +create(data) Port
        +update(id, data) Port
        +delete(id) boolean
    }
    
    class DisruptionEntity {
        +list(sortBy, limit) Disruption[]
        +getAllDisruptions() Disruption[]
        +get(id) Disruption
        +create(data) Disruption
    }
    
    class TariffEntity {
        +list(sortBy, limit) Tariff[]
        +getAllTariffs() Tariff[]
        +get(id) Tariff
        +create(data) Tariff
    }
    
    class VesselEntity {
        +list(sortBy, limit) Vessel[]
        +get(id) Vessel
        +getLiveAISData() AISData[]
    }
    
    %% Utility Classes
    class Utils {
        +createPageUrl(page) string
        +formatDate(date) string
        +parseCoordinates(coords) Coordinates
    }
    
    class Hooks {
        +useMobile() boolean
        +useRealTimeData() any
        +useDebounce(value, delay) any
    }
    
    class VectorStreamLogo {
        +className string
        +textClassName string
        +render()
    }
    
    class UIComponents {
        +Card
        +Button
        +Badge
        +Table
        +Sidebar
        +Slider
        +Select
        +Input
        +Tabs
    }
    
    %% Relationships
    App --> Pages
    Pages --> Layout
    Layout --> Dashboard
    Layout --> VesselTracking
    Layout --> TariffTracking
    Layout --> TradeRoutes
    Layout --> Analytics
    Layout --> LiveAIS
    Layout --> LivePortView
    Layout --> MobileAppDownload
    Layout --> VectorStreamLogo
    
    Dashboard --> GlobalMap
    Dashboard --> MetricsPanel
    Dashboard --> ActiveAlerts
    Dashboard --> DateSlicer
    Dashboard --> DisruptionTimeline
    
    TradeRoutes --> TradeRoutesComponent
    
    GlobalMap --> Port
    GlobalMap --> Disruption
    GlobalMap --> Tariff
    
    VesselTracking --> Vessel
    TariffTracking --> Tariff
    
    %% Data Layer Relationships
    Dashboard --> PortEntity
    Dashboard --> DisruptionEntity
    Dashboard --> TariffEntity
    
    PortEntity --> APIAggregator
    DisruptionEntity --> APIAggregator
    TariffEntity --> APIAggregator
    VesselEntity --> APIAggregator
    
    APIAggregator --> DataCache
    APIAggregator --> RealTimeIntegration
    APIAggregator --> NewsIntegration
    APIAggregator --> TariffIntegration
    APIAggregator --> MaritimeAPIs
    
    RealTimeIntegration --> RealTimeDataManager
    
    %% Component Dependencies
    GlobalMap --> UIComponents
    MetricsPanel --> UIComponents
    ActiveAlerts --> UIComponents
    DateSlicer --> UIComponents
    
    Layout --> Utils
    Dashboard --> Hooks
