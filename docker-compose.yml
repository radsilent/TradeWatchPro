version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:15-3.3
    container_name: tradewatch_postgres
    environment:
      POSTGRES_DB: tradewatch
      POSTGRES_USER: tradewatch_user
      POSTGRES_PASSWORD: tradewatch_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - tradewatch_network
    restart: unless-stopped

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: tradewatch_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradewatch_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # TensorFlow AI Processing Service
  tensorflow_processor:
    build:
      context: ./ai-processing
      dockerfile: Dockerfile
    container_name: tradewatch_tensorflow
    environment:
      - DATABASE_URL=postgresql://tradewatch_user:tradewatch_password@postgres:5432/tradewatch
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./ai-processing:/app
      - tensorflow_models:/app/models
      - tensorflow_data:/app/data
      - tensorflow_logs:/app/logs
    ports:
      - "8000:8000"  # FastAPI server
      - "6006:6006"  # TensorBoard
    networks:
      - tradewatch_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: ./ai-processing
      dockerfile: Dockerfile
    container_name: tradewatch_celery_worker
    command: celery -A celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://tradewatch_user:tradewatch_password@postgres:5432/tradewatch
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - ./ai-processing:/app
      - tensorflow_models:/app/models
      - tensorflow_data:/app/data
    networks:
      - tradewatch_network
    depends_on:
      - postgres
      - redis
      - tensorflow_processor
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./ai-processing
      dockerfile: Dockerfile
    container_name: tradewatch_celery_beat
    command: celery -A celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://tradewatch_user:tradewatch_password@postgres:5432/tradewatch
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - ./ai-processing:/app
      - tensorflow_models:/app/models
    networks:
      - tradewatch_network
    depends_on:
      - postgres
      - redis
      - tensorflow_processor
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: ./ai-processing
      dockerfile: Dockerfile
    container_name: tradewatch_flower
    command: celery -A celery_app flower --port=5555
    environment:
      - DATABASE_URL=postgresql://tradewatch_user:tradewatch_password@postgres:5432/tradewatch
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    networks:
      - tradewatch_network
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped

  # TensorFlow Serving for model inference
  tensorflow_serving:
    image: tensorflow/serving:2.15.0-gpu
    container_name: tradewatch_tf_serving
    environment:
      - MODEL_NAME=vessel_prediction
      - MODEL_BASE_PATH=/models
    volumes:
      - tensorflow_models:/models
    ports:
      - "8501:8501"  # REST API
      - "8500:8500"  # gRPC API
    networks:
      - tradewatch_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tradewatch_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - tradewatch_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tradewatch_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - tradewatch_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  tensorflow_models:
  tensorflow_data:
  tensorflow_logs:
  prometheus_data:
  grafana_data:

networks:
  tradewatch_network:
    driver: bridge
